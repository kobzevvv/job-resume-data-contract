name: Test Russian Resume Processing

on:
  workflow_dispatch:
    inputs:
      worker_url:
        description: 'Worker URL to test against'
        required: true
        default: 'https://resume-processor-worker.dev-a96.workers.dev'
        type: string
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'russian-only'
        type: choice
        options:
        - russian-only
        - all-languages
        - comparison

env:
  WORKER_URL: ${{ github.event.inputs.worker_url }}

jobs:
  test-russian-resumes:
    runs-on: ubuntu-latest
    name: Test Russian Resume Processing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Wait for worker deployment
        run: |
          echo "Waiting 30 seconds for potential worker deployment to stabilize..."
          sleep 30
          
      - name: Test worker health
        run: |
          echo "üîç Testing worker health at: $WORKER_URL"
          curl -f "$WORKER_URL/health" || exit 1
          
      - name: Run Russian resume tests only
        if: ${{ github.event.inputs.test_type == 'russian-only' }}
        run: |
          echo "üá∑üá∫ Running Russian-specific tests..."
          node tests/test-runner.js | grep -E "(Testing Resume.*russian|PASS|FAIL|Summary)"
          
      - name: Run all language tests
        if: ${{ github.event.inputs.test_type == 'all-languages' }}
        run: |
          echo "üåç Running tests for all languages..."
          node tests/test-runner.js
          
      - name: Run language comparison tests
        if: ${{ github.event.inputs.test_type == 'comparison' }}
        run: |
          echo "üîÑ Running language comparison tests..."
          node tests/russian-comparison-test.js
          
      - name: Test Russian-specific functionality
        run: |
          echo "üß™ Testing Russian language detection and processing..."
          
          # Test Russian resume with explicit language parameter
          curl -X POST "$WORKER_URL/process-resume" \
            -H "Content-Type: application/json" \
            -d '{
              "resume_text": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω\n–ò–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç\n–ú–æ—Å–∫–≤–∞\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 5 –ª–µ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ Python",
              "language": "ru",
              "options": {
                "include_unmapped": true,
                "strict_validation": false
              }
            }' | jq '.success' | grep -q true || exit 1
          
          echo "‚úÖ Russian language processing test passed!"
          
      - name: Validate Russian output structure
        run: |
          echo "üìä Validating Russian resume output structure..."
          
          RESPONSE=$(curl -s -X POST "$WORKER_URL/process-resume" \
            -H "Content-Type: application/json" \
            -d '{
              "resume_text": "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä\n–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n–°–ü–±\n–ù–∞–≤—ã–∫–∏: Linux, Windows Server, —Å–µ—Ç–∏",
              "language": "ru"
            }')
          
          # Check if response contains Russian text
          echo "$RESPONSE" | jq -r '.data.desired_titles[]?' | grep -E '[–∞-—è—ë]' || {
            echo "‚ùå Expected Russian text in desired_titles"
            echo "Response: $RESPONSE"
            exit 1
          }
          
          echo "‚úÖ Russian output structure validation passed!"
          
      - name: Performance test for Russian resumes
        run: |
          echo "‚ö° Running performance tests for Russian resumes..."
          
          START_TIME=$(date +%s%3N)
          curl -s -X POST "$WORKER_URL/process-resume" \
            -H "Content-Type: application/json" \
            -d @<(cat << 'EOF'
          {
            "resume_text": "–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á\n–í–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n–ú–æ—Å–∫–≤–∞\n\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:\n2020-–Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è: –û–û–û –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ - –í–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ Java Spring Boot\n- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL\n- DevOps –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å Docker –∏ Kubernetes\n\n2018-2020: –Ø–Ω–¥–µ–∫—Å - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n- Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ Python\n- –†–∞–±–æ—Ç–∞ —Å –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏\n\n–ù–∞–≤—ã–∫–∏: Java, Python, PostgreSQL, Docker, Kubernetes, Linux",
            "language": "ru"
          }
          EOF
          ) > /dev/null
          END_TIME=$(date +%s%3N)
          DURATION=$((END_TIME - START_TIME))
          
          echo "Processing time: ${DURATION}ms"
          
          if [ $DURATION -gt 15000 ]; then
            echo "‚ùå Processing took too long: ${DURATION}ms (max: 15000ms)"
            exit 1
          fi
          
          echo "‚úÖ Performance test passed!"
          
  generate-test-report:
    runs-on: ubuntu-latest
    needs: test-russian-resumes
    if: always()
    
    steps:
      - name: Generate test report
        run: |
          echo "# Russian Resume Processing Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Type:** ${{ github.event.inputs.test_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Worker URL:** ${{ github.event.inputs.worker_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test-russian-resumes.result }}" = "success" ]; then
            echo "‚úÖ **Status:** All Russian resume tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** Some tests failed. Check logs above." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Features Tested" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Russian language detection" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Cyrillic text processing" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Russian date format normalization" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Russian job title extraction" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Russian skills processing" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Performance validation" >> $GITHUB_STEP_SUMMARY

name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code Quality Checks
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run ESLint
        run: pnpm run lint
      - name: Check Prettier formatting
        run: pnpm run format:check
      - name: TypeScript type check
        run: pnpm run type-check

  # Contract and Schema Validation
  contract-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      # Validate JSON Schema
      - name: Validate Resume Data Schema
        run: |
          echo "Validating JSON schema structure..."
          node -e "
            const schema = require('./resume_data_contract/resume_data_schema.json');
            const example = require('./resume_data_contract/resume_data_value_example.json');
            console.log('✅ Schema and example are valid JSON');
            
            // Basic schema validation
            if (!schema.type || !schema.properties) {
              throw new Error('Invalid schema structure');
            }
            console.log('✅ Schema structure is valid');
          "
      
      # Run resume processing tests
      - name: Run Resume Processing Tests
        run: pnpm test
      
      # Test expected outputs still match
      - name: Validate Expected Test Outputs
        run: |
          echo "Checking that expected outputs are valid JSON..."
          for file in tests/expected-outputs/*.json; do
            echo "Validating $file"
            node -e "
              const data = require('./$file');
              console.log('✅ $file is valid JSON');
            " || {
              echo "❌ Invalid JSON in $file"
              exit 1
            }
          done

  # Security and Dependency Checks
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run security audit
        run: pnpm audit --audit-level moderate
      - name: Check for outdated dependencies
        run: |
          echo "Checking for severely outdated dependencies..."
          pnpm outdated || echo "Some dependencies could be updated"

  # Build and Basic Functionality
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build TypeScript
        run: pnpm run build
      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build output directory not found"
            exit 1
          fi
          echo "✅ Build completed successfully"

  # Resume Processing Smoke Tests
  processing-smoke-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      # Test that sample resumes can be read and processed
      - name: Validate Sample Resumes
        run: |
          echo "Checking sample resume files exist and are readable..."
          for resume in tests/sample-resumes/*.txt; do
            if [ ! -f "$resume" ]; then
              echo "❌ Resume file not found: $resume"
              exit 1
            fi
            if [ ! -s "$resume" ]; then
              echo "❌ Resume file is empty: $resume"
              exit 1
            fi
            echo "✅ Valid resume file: $resume"
          done
      
      # Quick validation that our test runner works
      - name: Dry Run Test Suite
        run: |
          echo "Running test suite in dry-run mode..."
          # This assumes your test runner has a dry-run option
          # Adjust based on your actual test setup
          timeout 30s pnpm test || echo "Tests completed or timed out safely"

  # File Structure and Configuration Checks
  project-structure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate Project Structure
        run: |
          echo "Validating project structure..."
          
          # Required files check
          required_files=(
            "package.json"
            "tsconfig.json" 
            "wrangler.toml"
            "resume_data_contract/resume_data_schema.json"
            "resume_data_contract/resume_data_value_example.json"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done
          
          # Required directories check
          required_dirs=(
            "src"
            "tests"
            "tests/sample-resumes"
            "tests/expected-outputs"
          )
          
          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "❌ Required directory missing: $dir"
              exit 1
            fi
            echo "✅ Found: $dir"
          done
          
          echo "✅ Project structure validation passed"
      
      - name: Validate Configuration Files
        run: |
          echo "Validating configuration files..."
          
          # Validate package.json has required scripts
          node -e "
            const pkg = require('./package.json');
            const requiredScripts = ['build', 'test', 'type-check', 'deploy'];
            const missing = requiredScripts.filter(s => !pkg.scripts[s]);
            if (missing.length) {
              console.error('❌ Missing required package.json scripts:', missing.join(', '));
              process.exit(1);
            }
            console.log('✅ All required package.json scripts present');
          "
          
          # Validate tsconfig.json
          node -e "
            const tsconfig = require('./tsconfig.json');
            if (!tsconfig.compilerOptions || !tsconfig.compilerOptions.strict) {
              console.error('❌ TypeScript strict mode not enabled');
              process.exit(1);
            }
            console.log('✅ TypeScript configuration is valid');
          "
